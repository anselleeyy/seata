{
    "Name": "simplePersistStateMachine",
    "Comment": "自定义中间状态是否持久化的测试状态机定义",
    "StartState": "FirstState",
    "Version": "0.0.1",
    "States": {
        "FirstState": {
            "Type": "ServiceTask",
            "ServiceName": "demoService",
            "ServiceMethod": "foo",
            "Next": "ChoiceState",
            "CompensateState": "CompensateFirstState",
            "Input": [
                {
                    "fooInput": "$.[a]"
                }
            ],
            "Output": {
                "fooResult": "$.#root"
            }
        },
        "ChoiceState":{
            "Type": "Choice",
            "Choices":[
                {
                    "Expression":"[a] == 1",
                    "Next":"SecondState"
                },
                {
                    "Expression":"[a] == 2",
                    "Next":"ThirdState"
                }
            ],
            "Default":"Fail"
        },
        "SecondState": {
            "Type": "ServiceTask",
            "ServiceName": "demoService",
            "ServiceMethod": "randomExceptionMethod",
            "IsForUpdate": true,
            "IsRetryPersist": false,
            "Input": [
                {
                    "barInput": "$.[fooResult]",
                    "throwException": "$.[barThrowException]"
                }
            ],
            "Output": {
                "barResult": "$.#root"
            },
            "Status": {
                "$Exception{io.seata.saga.engine.mock.DemoException}": "UN",
                "#root != null": "SU",
                "#root == null": "FA"
            },
            "Next": "Succeed"
        },
        "ThirdState": {
            "Type": "ServiceTask",
            "ServiceName": "demoService",
            "ServiceMethod": "randomExceptionMethod",
            "CompensateState": "CompensateThirdState",
            "IsRetryPersist": false,
            "Input": [
                {
                    "barInput": "$.[fooResult]",
                    "throwException": "$.[barThrowException]"
                }
            ],
            "Output": {
                "barResult": "$.#root"
            },
            "Status": {
                "$Exception{io.seata.saga.engine.mock.DemoException}": "UN",
                "#root != null": "SU",
                "#root == null": "FA"
            },
            "Catch": [
                {
                    "Exceptions": [
                        "java.lang.Throwable"
                    ],
                    "Next": "CompensationTrigger"
                }
            ],
            "Next": "Succeed"
        },
        "CompensateFirstState": {
            "Type": "ServiceTask",
            "ServiceName": "demoService",
            "ServiceMethod": "compensateFoo"
        },
        "CompensateThirdState": {
            "Type": "ServiceTask",
            "ServiceName": "demoService",
            "ServiceMethod": "compensateBar",
            "IsCompensatePersist": false,
            "Input": [
                {
                    "compensateBarInput": "$.[barResult]",
                    "throwException": "$.[compensateBarThrowException]"
                }
            ]
        },
        "CompensationTrigger": {
            "Type": "CompensationTrigger",
            "Next": "Fail"
        },
        "Succeed": {
            "Type":"Succeed"
        },
        "Fail": {
            "Type":"Fail",
            "ErrorCode": "NOT_FOUND",
            "Message": "not found"
        }
    }
}
